/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Logic.Member;
import Logic.Player;
import Logic.SportsLeagueSystem;
import static Logic.SportsLeagueSystem.removePlayerFromTeam;
import Logic.Team;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 * This class represents the GUI for managing members in a sports league system.
 * It provides functionalities related to adding, removing, and updating
 * members. It interacts with the SportsLeagueSystem class for data
 * manipulation.
 *
 * @author Maryam Mohsen, Fatima Khamis, Zahra Husain
 * @author Maryam Mohsen, Fatima Khamis, Zahra Husain
 */
public class MembersOptions extends javax.swing.JFrame {

    /**
     * Creates new form TeamsOptions
     *
     * @author Maryam Mohsen, Fatima Khamis, Zahra Husain
     */
    public MembersOptions() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     * @author Maryam Mohsen, Fatima Khamis, Zahra Husain
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAlterMember = new javax.swing.JButton();
        btnAddMember = new javax.swing.JButton();
        btnAssignTransfer = new javax.swing.JButton();
        btnRemovePlayerFromTeam = new javax.swing.JButton();
        btnDeleteMember = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(107, 112, 92));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI.Images/team.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");

        btnBack.setBackground(new java.awt.Color(221, 190, 169));
        btnBack.setFont(new java.awt.Font("Futura", 0, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.setBorderPainted(false);
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBackMouseExited(evt);
            }
        });
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(221, 190, 169));
        btnExit.setFont(new java.awt.Font("Futura", 0, 18)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnExitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnExitMouseExited(evt);
            }
        });
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Futura", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Members");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI.Images/smallLogo.png"))); // NOI18N

        btnAlterMember.setBackground(new java.awt.Color(221, 190, 169));
        btnAlterMember.setFont(new java.awt.Font("Futura", 0, 20)); // NOI18N
        btnAlterMember.setText("Alter Member");
        btnAlterMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAlterMemberMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAlterMemberMouseExited(evt);
            }
        });
        btnAlterMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterMemberActionPerformed(evt);
            }
        });

        btnAddMember.setBackground(new java.awt.Color(221, 190, 169));
        btnAddMember.setFont(new java.awt.Font("Futura", 0, 20)); // NOI18N
        btnAddMember.setText("Add Member");
        btnAddMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddMemberMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddMemberMouseExited(evt);
            }
        });
        btnAddMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMemberActionPerformed(evt);
            }
        });

        btnAssignTransfer.setBackground(new java.awt.Color(221, 190, 169));
        btnAssignTransfer.setFont(new java.awt.Font("Futura", 0, 20)); // NOI18N
        btnAssignTransfer.setText("Assign/Transfer Member To Team");
        btnAssignTransfer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAssignTransferMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAssignTransferMouseExited(evt);
            }
        });
        btnAssignTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignTransferActionPerformed(evt);
            }
        });

        btnRemovePlayerFromTeam.setBackground(new java.awt.Color(221, 190, 169));
        btnRemovePlayerFromTeam.setFont(new java.awt.Font("Futura", 0, 20)); // NOI18N
        btnRemovePlayerFromTeam.setText("Remove Member From Team");
        btnRemovePlayerFromTeam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRemovePlayerFromTeamMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnRemovePlayerFromTeamMouseExited(evt);
            }
        });
        btnRemovePlayerFromTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePlayerFromTeamActionPerformed(evt);
            }
        });

        btnDeleteMember.setBackground(new java.awt.Color(221, 190, 169));
        btnDeleteMember.setFont(new java.awt.Font("Futura", 0, 20)); // NOI18N
        btnDeleteMember.setText("Delete Member");
        btnDeleteMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDeleteMemberMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDeleteMemberMouseExited(evt);
            }
        });
        btnDeleteMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMemberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel3)
                .addGap(315, 315, 315)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAlterMember, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddMember, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteMember, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAssignTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemovePlayerFromTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(btnAddMember, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btnAlterMember, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnDeleteMember, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btnAssignTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(btnRemovePlayerFromTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1220, 630));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        MainMenu mainMenu = new MainMenu();
        mainMenu.setVisible(true);//show the main menu
        dispose(); //hide the current window

    }//GEN-LAST:event_btnBackActionPerformed
    /**
     * Opens the Alter Member Menu Frame if there are members or players in the
     * system. Shows an error message if no members or players are found.
     *
     * @author Maryam Mohsen, Fatima Khamis, Zahra Husain
     */
    private void btnAlterMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterMemberActionPerformed
        //Open Alter Member Menu Frame 
        if (SportsLeagueSystem.getAssignedMembersList().size() == 0 && SportsLeagueSystem.getUnAssignedPlayersList().size() == 0) {
            JOptionPane.showMessageDialog(this, "No members found in the system");
        } else {
            AlterMemberMenu alterMemberMenu = new AlterMemberMenu();
            alterMemberMenu.setVisible(true); //show Add Team Form window
            dispose(); //hide the current window
        }
    }//GEN-LAST:event_btnAlterMemberActionPerformed
    /**
     * Opens the Add Member Menu Frame and hides the current window.
     *
     * @author Maryam Mohsen, Fatima Khamis, Zahra Husain
     */
    private void btnAddMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMemberActionPerformed
        //Open Add Member Menu Frame 
        AddMemberMenu addMemberMenu = new AddMemberMenu();
        addMemberMenu.setVisible(true); //show Add Team Form window
        dispose(); //hide the current window
    }//GEN-LAST:event_btnAddMemberActionPerformed
    /**
     * Displays a dialog to choose between assigning or transferring a player.
     * Proceeds with the chosen action and updates the system accordingly.
     *
     * @author Maryam Mohsen, Fatima Khamis, Zahra Husain
     */
    private void btnAssignTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignTransferActionPerformed
        int choice = JOptionPane.showOptionDialog(
                null,
                "Do you want to assign or transfer a player?",
                "Choose Option",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Cancel", "Transfer", "Assign"}, // Custom button labels
                "Cancel" // Default selection
        );

        // If "Assign" is chosen, display the second JOptionPane dialog with the second combo box
        if (choice == 2) { // Check if "Assign" is chosen (custom button labels array index)
            ArrayList<Player> unAssignedPlayersList = SportsLeagueSystem.getUnAssignedPlayersList();

            if (unAssignedPlayersList.size() == 0) {
                JOptionPane.showMessageDialog(this, "No Unassigned Players");
            } else {
                // Display combo box to select player
                JComboBox<String> cb = new JComboBox<>();
                for (Player player : unAssignedPlayersList) {
                    cb.addItem("Name: " + player.getMemberName() + " - ID: " + player.getMemberId());
                }

                int choice1 = JOptionPane.showConfirmDialog(this, cb, "Select Player", JOptionPane.OK_CANCEL_OPTION);

                if (choice1 == JOptionPane.OK_OPTION) {
                    // If "OK" is clicked, get the selected player ID
                    try {
                        String selectedPlayer = (String) cb.getSelectedItem();
                        if (selectedPlayer != null) {
                            // Extract the numeric part (player ID) from the selectedPlayer string
                            String playerIdStr = selectedPlayer.substring(selectedPlayer.lastIndexOf(":") + 2).trim();
                            int playerId = Integer.parseInt(playerIdStr);

                            // Find the selected player object
                            Player player = null;
                            for (Player p : unAssignedPlayersList) {
                                if (p.getMemberId() == playerId) {
                                    player = p;
                                    break;
                                }
                            }

                            if (player != null) {
                                // Proceed with team selection and salary assignment for the selected player
                                JComboBox<String> comboBox = new JComboBox<>();
                                ArrayList<Team> teamsList = SportsLeagueSystem.getTeamsList();
                                if (teamsList.size() == 0) {
                                    JOptionPane.showMessageDialog(this, "No teams found in the system!");
                                } else {
                                    for (Team team : teamsList) {
                                        comboBox.addItem("Name: " + team.getTeamName() + " - ID: " + team.getTeamId());
                                    }

                                    int choice3 = JOptionPane.showConfirmDialog(this, comboBox, "Select Team", JOptionPane.OK_CANCEL_OPTION);
                                    if (choice3 == JOptionPane.OK_OPTION) { // Only proceed if "OK" is clicked in the third dialog
                                        String selectedTeam = (String) comboBox.getSelectedItem();
                                        // Extract the numeric part (team ID) from the selectedTeam string
                                        String teamIdStr = selectedTeam.substring(selectedTeam.lastIndexOf(":") + 2).trim();
                                        int teamId = Integer.parseInt(teamIdStr);

                                        // Check if the team already has a captain
                                        boolean teamHasCaptain = false;
                                        for (Player p : SportsLeagueSystem.searchTeam(teamId).getTeamPlayers()) {
                                            if (p.isCaptain()) {
                                                teamHasCaptain = true;
                                                break;
                                            }
                                        }

                                        // Check if the player to be assigned is a captain
                                        boolean isPlayerCaptain = false;
                                        if (player.isCaptain()) {
                                            isPlayerCaptain = true;
                                        }

                                        // Assign player as captain if the team doesn't have one
                                        if (!teamHasCaptain || !isPlayerCaptain) {
                                            // Get salary input
                                            String salary = JOptionPane.showInputDialog(this, "Enter Salary:", "Salary", JOptionPane.OK_CANCEL_OPTION);

                                            // If OK is clicked
                                            if (salary != null) {
                                                try {
                                                    if (salary.isEmpty()) {
                                                        JOptionPane.showMessageDialog(this, "Salary cannot be null.");
                                                    } else {
                                                        double salaryDouble = Double.parseDouble(salary);
                                                        if (salaryDouble == 0.0) {
                                                            JOptionPane.showMessageDialog(this, "Salary cannot be zero.");
                                                        } else if (salaryDouble < 400) {
                                                            JOptionPane.showMessageDialog(this, "Salary cannot be less than 400.");
                                                        } else {
                                                            // Transfer or assign player to the team
                                                            Team tempTeam = SportsLeagueSystem.searchTeam(teamId);
                                                            player.setYearlySalary(salaryDouble); // Set the salary for the player
                                                            player.setCaptain(!teamHasCaptain && isPlayerCaptain); // Set as captain only if the team doesn't have one and player is captain
                                                            // Transfer player to the team
                                                            SportsLeagueSystem.transferOrAssignToTeam(1, player.getMemberId(), tempTeam.getTeamId());
                                                            // Remove the player from the unassigned players list
                                                            unAssignedPlayersList.remove(player);
                                                            // Show success message
                                                            JOptionPane.showMessageDialog(this, "Player assigned successfully to team: " + tempTeam.getTeamName());
                                                        }
                                                    }
                                                } catch (NumberFormatException ex) {
                                                    JOptionPane.showMessageDialog(this, "Invalid salary format. Please enter a valid number.");
                                                }
                                            }
                                        } else if (isPlayerCaptain && teamHasCaptain) { //if the player to be assigned is a captain and the team has a captain
                                            Team tempTeam = SportsLeagueSystem.searchTeam(teamId);
                                            JOptionPane.showMessageDialog(this, "The chosen team already has a captain. Player will be assigned without captain role.");
                                            player.setCaptain(false); //remove captain role from the player 

                                            String salary = JOptionPane.showInputDialog(this, "Enter Salary:", "Salary", JOptionPane.OK_CANCEL_OPTION);

                                            // If OK is clicked
                                            if (salary != null && !salary.isEmpty()) {
                                                try {
                                                    double salaryDouble = Double.parseDouble(salary);
                                                    if (salaryDouble == 0.0) {
                                                        JOptionPane.showMessageDialog(this, "Salary cannot be zero.");
                                                    } else {
                                                        // Transfer or assign player to the team
                                                        player.setYearlySalary(salaryDouble); // Set the salary for the player
                                                        player.setCaptain(!teamHasCaptain && isPlayerCaptain); // Set as captain only if the team doesn't have one and player is captain
                                                        // Transfer player to the team
                                                        SportsLeagueSystem.transferOrAssignToTeam(1, player.getMemberId(), tempTeam.getTeamId());
                                                        // Remove the player from the unassigned players list
                                                        unAssignedPlayersList.remove(player);
                                                        // Show success message
                                                        JOptionPane.showMessageDialog(this, "Player assigned successfully to team: " + tempTeam.getTeamName());
                                                    }
                                                } catch (NumberFormatException ex) {
                                                    JOptionPane.showMessageDialog(this, "Invalid salary format. Please enter a valid number.");
                                                }

                                            }

                                        }
                                    }
                                }
                            }
                        }
                    } catch (NumberFormatException e) {
                        // Handle the case where parsing fails
                        e.printStackTrace(); // or handle it in another appropriate way
                    }
                }
            }
        }

// If "Transfer" option was chosen 
        if (choice == 1) {
            // Add items from assignedPlayersList to the combobox 
            int count = 0;
            for (Member member : SportsLeagueSystem.getAssignedMembersList()) {
                if (member instanceof Player) {
                    count++;
                }
            }
            if (count == 0) {
                JOptionPane.showMessageDialog(this, "No assigned players found!");
            } else {
                JComboBox<String> cb2 = new JComboBox<>();
                for (Member player : SportsLeagueSystem.getAssignedMembersList()) {
                    if (player instanceof Player) {
                        cb2.addItem("Name: " + player.getMemberName() + " - ID: " + player.getMemberId());
                    }
                }
                int choice2 = JOptionPane.showConfirmDialog(this, cb2, "Select Player", JOptionPane.OK_CANCEL_OPTION);
                if (choice2 == JOptionPane.OK_OPTION) {
                    // If "OK" is clicked, get the selected player ID
                    try {
                        String selectedPlayer = (String) cb2.getSelectedItem();
                        if (selectedPlayer != null) {
                            // Extract the numeric part (player ID) from the selectedPlayer string
                            String playerIdStr = selectedPlayer.substring(selectedPlayer.lastIndexOf(":") + 2).trim();
                            int playerId = Integer.parseInt(playerIdStr);

                            // Find the selected player object
                            Player tempPlayer = null;
                            for (Member p : SportsLeagueSystem.getAssignedMembersList()) {
                                if (p.getMemberId() == playerId) {
                                    tempPlayer = (Player) p;
                                    break;
                                }
                            }

                            if (tempPlayer != null) {
                                // Proceed with team selection and salary assignment for the selected player
                                JComboBox<String> comboBox = new JComboBox<>();
                                ArrayList<Team> teamsList = SportsLeagueSystem.getTeamsList();
                                if (teamsList.size() == 0) {
                                    JOptionPane.showMessageDialog(this, "No teams found!");
                                } else {
                                    for (Team team : teamsList) {
                                        comboBox.addItem("Name: " + team.getTeamName() + " - ID: " + team.getTeamId());
                                    }

                                    int choice4 = JOptionPane.showConfirmDialog(this, comboBox, "Select Team", JOptionPane.OK_CANCEL_OPTION);
                                    if (choice4 == JOptionPane.OK_OPTION) { // Only proceed if "OK" is clicked in the third dialog
                                        String selectedTeam = (String) comboBox.getSelectedItem();
                                        // Extract the numeric part (team ID) from the selectedTeam string
                                        String teamIdStr = selectedTeam.substring(selectedTeam.lastIndexOf(":") + 2).trim();
                                        int teamId = Integer.parseInt(teamIdStr);

                                        //search for the player in the chosen team list
                                        boolean playerFound = false;
                                        for (Player player : SportsLeagueSystem.searchTeam(teamId).getTeamPlayers()) {
                                            if (player.getMemberId() == tempPlayer.getMemberId()) {
                                                playerFound = true;
                                            }
                                        }
                                        if (playerFound) {
                                            JOptionPane.showMessageDialog(this, "The selected player is already in this team");
                                        } else {

                                            // Check if the team already has a captain
                                            boolean teamHasCaptain = false;
                                            for (Player p : SportsLeagueSystem.searchTeam(teamId).getTeamPlayers()) {
                                                if (p.isCaptain()) {
                                                    teamHasCaptain = true;
                                                    break;
                                                }
                                            }

                                            // Check if the player to be assigned is a captain
                                            boolean isPlayerCaptain = false;
                                            if (tempPlayer.isCaptain()) {
                                                isPlayerCaptain = true;
                                            }

                                            // Assign player as captain if the team doesn't have one
                                            if (!teamHasCaptain || !isPlayerCaptain) {
                                                // Get salary input
                                                String salary = JOptionPane.showInputDialog(this, "Enter Salary:", "Salary", JOptionPane.OK_CANCEL_OPTION);
                                                if (salary != null) {
                                                    // If OK is clicked
                                                    if (salary.isEmpty()) {
                                                        JOptionPane.showMessageDialog(this, "Salary cannot be null.");
                                                    } else {
                                                        try {
                                                            double salaryDouble = Double.parseDouble(salary);
                                                            if (salaryDouble == 0.0) {
                                                                JOptionPane.showMessageDialog(this, "Salary cannot be zero.");
                                                            } else if (salaryDouble < 400) {
                                                                JOptionPane.showMessageDialog(this, "Salary cannot be less than 400.");
                                                            } else {
                                                                // Transfer or assign player to the team
                                                                Team tempTeam = SportsLeagueSystem.searchTeam(teamId);
                                                                tempPlayer.setYearlySalary(salaryDouble); // Set the salary for the player
                                                                tempPlayer.setCaptain(!teamHasCaptain && isPlayerCaptain); // Set as captain only if the team doesn't have one and player is captain
                                                                // Transfer player to the team
                                                                SportsLeagueSystem.transferOrAssignToTeam(2, tempPlayer.getMemberId(), tempTeam.getTeamId());

                                                                // Show success message
                                                                JOptionPane.showMessageDialog(this, "Player transfered successfully to team: " + tempTeam.getTeamName());
                                                            }
                                                        } catch (NumberFormatException ex) {
                                                            JOptionPane.showMessageDialog(this, "Invalid salary format. Please enter a valid number.");
                                                        }
                                                    }
                                                }
                                            } else if (isPlayerCaptain && teamHasCaptain) { //if the player to be assigned is a captain and the team has a captain
                                                Team tempTeam = SportsLeagueSystem.searchTeam(teamId);
                                                JOptionPane.showMessageDialog(this, "The chosen team already has a captain. Player will be transfered without captain role.");
                                                tempPlayer.setCaptain(false); //remove captain role from the player 

                                                String salary = JOptionPane.showInputDialog(this, "Enter Salary:", "Salary", JOptionPane.OK_CANCEL_OPTION);

                                                // If OK is clicked
                                                if (salary != null) {
                                                    if (salary.isEmpty()) {
                                                        JOptionPane.showMessageDialog(this, "Salary cannot be null.");
                                                    } else {

                                                        try {
                                                            double salaryDouble = Double.parseDouble(salary);
                                                            if (salaryDouble == 0.0) {
                                                                JOptionPane.showMessageDialog(this, "Salary cannot be zero.");
                                                            } else if (salaryDouble < 400) {
                                                                JOptionPane.showMessageDialog(this, "Salary cannot be less than 400.");
                                                            } else {
                                                                // Transfer or assign player to the team
                                                                tempPlayer.setYearlySalary(salaryDouble); // Set the salary for the player
                                                                tempPlayer.setCaptain(!teamHasCaptain && isPlayerCaptain); // Set as captain only if the team doesn't have one and player is captain
                                                                // Transfer player to the team
                                                                SportsLeagueSystem.transferOrAssignToTeam(2, tempPlayer.getMemberId(), tempTeam.getTeamId());

                                                                // Show success message
                                                                JOptionPane.showMessageDialog(this, "Player transfered successfully to team: " + tempTeam.getTeamName());
                                                            }
                                                        } catch (NumberFormatException ex) {
                                                            JOptionPane.showMessageDialog(this, "Invalid salary format. Please enter a valid number.");
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } catch (NumberFormatException e) {
                        // Handle the case where parsing fails
                        e.printStackTrace(); // or handle it in another appropriate way
                    }
                }
            }
        }

    }//GEN-LAST:event_btnAssignTransferActionPerformed

    /**
     * Opens a dialog to select a team and a player to be removed from that
     * team. Removes the player from the team and updates the system data.
     *
     * @author Maryam Mohsen, Fatima Khamis, Zahra Husain
     */
    private void btnRemovePlayerFromTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePlayerFromTeamActionPerformed
        // TODO add your handling code here:
        JComboBox comboBox = new JComboBox();
        ArrayList<Team> teamsList = SportsLeagueSystem.getTeamsList();
        if (teamsList.size() == 0) {
            JOptionPane.showMessageDialog(this, "No teams found in the system!");
        } else {
            for (Team team : teamsList) {
                comboBox.addItem("Name: " + team.getTeamName() + " - ID: " + team.getTeamId());
            }
            int choice = JOptionPane.showConfirmDialog(this, comboBox, "Select Team", JOptionPane.OK_CANCEL_OPTION);
            if (choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {// if clicked cancel or close
                this.setVisible(true); //display current window and hide the pop up
            } else {
                String selectedTeam = (String) comboBox.getSelectedItem();
                // Extract the team ID from the selected item
                Integer teamId = Integer.parseInt(selectedTeam.split(" - ID: ")[1]);

                if (teamId != null) {
                    JComboBox cb = new JComboBox();
                    ArrayList<Player> playersList = SportsLeagueSystem.searchTeam(teamId).getTeamPlayers();
                    if (playersList.size() == 0) {
                        JOptionPane.showMessageDialog(this, "No players found for this team!");
                    } else {
                        for (Player player : playersList) {
                            cb.addItem("Name: " + player.getMemberName() + " - ID: " + player.getMemberId());
                        }
                        int choice1 = JOptionPane.showConfirmDialog(this, cb, "Select Player", JOptionPane.OK_CANCEL_OPTION);
                        if (choice1 == JOptionPane.CANCEL_OPTION || choice1 == JOptionPane.CLOSED_OPTION) {// if clicked cancel or close
                            this.setVisible(true); //display current window and hide the pop up
                        } else {
                            String selectedPlayer = (String) cb.getSelectedItem();
                            // Extract the player ID from the selected item
                            Integer playerId = Integer.parseInt(selectedPlayer.split(" - ID: ")[1]);
                            if (playerId != null) {
                                SportsLeagueSystem.removePlayerFromTeam(teamId, playerId);
                                JOptionPane.showMessageDialog(this, "The player has been removed from the team successfully");
                                for (int i = 0; i < SportsLeagueSystem.searchTeam(teamId).getTeamPlayers().size(); i++) {
                                    if (SportsLeagueSystem.searchTeam(teamId).getTeamPlayers().get(i).getMemberId() == playerId) {
                                        SportsLeagueSystem.searchTeam(teamId).getTeamPlayers().remove(i);

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnRemovePlayerFromTeamActionPerformed
    /**
     * Opens the Delete Member Menu Frame if there are members or players in the
     * system. Shows an error message if no members or players are found.
     *
     * @author Maryam Mohsen, Fatima Khamis, Zahra Husain
     */
    private void btnDeleteMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMemberActionPerformed
        // TODO add your handling code here:
        if (SportsLeagueSystem.getAssignedMembersList().size() == 0 && SportsLeagueSystem.getUnAssignedPlayersList().size() == 0) {
            JOptionPane.showMessageDialog(this, "No members found in the system");
        } else {
            //Open Delete Member Menu Frame 
            DeleteMemberMenu deleteMemberMenu = new DeleteMemberMenu();
            deleteMemberMenu.setVisible(true); //show Add Team Form window
            dispose(); //hide the current window
        }

    }//GEN-LAST:event_btnDeleteMemberActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0); //exit the system
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseEntered
        // TODO add your handling code here:
        btnBack.setBackground(java.awt.Color.decode("#CB997E"));
    }//GEN-LAST:event_btnBackMouseEntered

    private void btnExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseEntered
        // TODO add your handling code here:
        btnExit.setBackground(java.awt.Color.decode("#CB997E"));
    }//GEN-LAST:event_btnExitMouseEntered

    private void btnAddMemberMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMemberMouseEntered
        // TODO add your handling code here:
        btnAddMember.setBackground(java.awt.Color.decode("#CB997E"));
    }//GEN-LAST:event_btnAddMemberMouseEntered

    private void btnAlterMemberMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAlterMemberMouseEntered
        // TODO add your handling code here:
        btnAlterMember.setBackground(java.awt.Color.decode("#CB997E"));
    }//GEN-LAST:event_btnAlterMemberMouseEntered

    private void btnDeleteMemberMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMemberMouseEntered
        // TODO add your handling code here:
        btnDeleteMember.setBackground(java.awt.Color.decode("#CB997E"));
    }//GEN-LAST:event_btnDeleteMemberMouseEntered

    private void btnAssignTransferMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAssignTransferMouseEntered
        // TODO add your handling code here:
        btnAssignTransfer.setBackground(java.awt.Color.decode("#CB997E"));
    }//GEN-LAST:event_btnAssignTransferMouseEntered

    private void btnRemovePlayerFromTeamMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemovePlayerFromTeamMouseEntered
        // TODO add your handling code here:
        btnRemovePlayerFromTeam.setBackground(java.awt.Color.decode("#CB997E"));
    }//GEN-LAST:event_btnRemovePlayerFromTeamMouseEntered

    private void btnBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseExited
        // TODO add your handling code here:
        btnBack.setBackground(java.awt.Color.decode("#DDBEA9"));
    }//GEN-LAST:event_btnBackMouseExited

    private void btnExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseExited
        // TODO add your handling code here:
        btnExit.setBackground(java.awt.Color.decode("#DDBEA9"));
    }//GEN-LAST:event_btnExitMouseExited

    private void btnAddMemberMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMemberMouseExited
        // TODO add your handling code here:
        btnAddMember.setBackground(java.awt.Color.decode("#DDBEA9"));
    }//GEN-LAST:event_btnAddMemberMouseExited

    private void btnAlterMemberMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAlterMemberMouseExited
        // TODO add your handling code here:
        btnAlterMember.setBackground(java.awt.Color.decode("#DDBEA9"));
    }//GEN-LAST:event_btnAlterMemberMouseExited

    private void btnDeleteMemberMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMemberMouseExited
        // TODO add your handling code here:
        btnDeleteMember.setBackground(java.awt.Color.decode("#DDBEA9"));
    }//GEN-LAST:event_btnDeleteMemberMouseExited

    private void btnAssignTransferMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAssignTransferMouseExited
        // TODO add your handling code here:
        btnAssignTransfer.setBackground(java.awt.Color.decode("#DDBEA9"));
    }//GEN-LAST:event_btnAssignTransferMouseExited

    private void btnRemovePlayerFromTeamMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemovePlayerFromTeamMouseExited
        // TODO add your handling code here:
        btnRemovePlayerFromTeam.setBackground(java.awt.Color.decode("#DDBEA9"));
    }//GEN-LAST:event_btnRemovePlayerFromTeamMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MembersOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MembersOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MembersOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MembersOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MembersOptions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMember;
    private javax.swing.JButton btnAlterMember;
    private javax.swing.JButton btnAssignTransfer;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteMember;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRemovePlayerFromTeam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
